#!/usr/bin/env python3 -u
import signal
import os
import sys
import contrib
import time
import simplejson
import threading
import cmd
import websocket
import requests
import atexit

PORTS = [8081, 8082, 8083, 8084, 8085]

endpoints = []
rcs = []
statuses = [None, None, None, None, None]
i = 0
for port in PORTS:
    rc = contrib.RaftClient()
    rc.set_name('u{}'.format(i))
    rc.set_node_id(i)
    rc.set_host('127.0.0.1')
    rc.set_port(port)
    rc.ws_start()
    endpoints.append(rc)
    rcs.append(rc)
    i = i + 1


def on_uring_change(_subject, message):
    print(f"URING: {message}")


def report(_subject, json):
    print("{}\n".format(simplejson.dumps(json)))


def maybe_reconnect():
    for rc in endpoints:
        if rc.ws.sock is None:
            rc.ws_start()
            # rc.subscribe('uring', lambda json: report('URING', json)


def subscribe_all():
    for rc in endpoints:
        subscribe(rc)


def subscribe(rc):
    rc.subscribe('kv', lambda json: report('KV', json))
    rc.subscribe('mring', lambda json: report('MRing', json))
    rc.subscribe('reply', lambda json: report('REPLY:', json))
    rc.subscribe('uring', lambda json: report('URing', json))
    rc.subscribe('uring', on_uring_change)


def disconnect_all():
    for rc in endpoints:
        if not rc.ws.sock is None:
            rc.ws.close()


time.sleep(1)


def wsc_open(ws):
    time.sleep(5)
    ws.connect()
    print(f"WS Cluster Command Connection estasblished")


def wsc_message(ws, message):
    print(f"WS Cluster Command Connection message {message}")


def wsc_error(ws, error):
    print(f"WS Cluster Command Connection error {error}")


def wsc_close(ws):
    print("WS Cluster Command Connection closed")


wsc = None
quit = False
cwq = []


def wsc():
    global wsc
    global quit
    wsc = websocket.WebSocketApp("ws://127.0.0.1:8000/",
                                 on_open=wsc_open,
                                 on_message=wsc_message,
                                 on_error=wsc_error,
                                 on_close=wsc_close)
    while not quit:
        wsc.run_forever()


t = threading.Thread(target=wsc)
t.start()

print('{"fruitninja": "🍒🍌🍏"}')
print('{"status": "start"}')

time.sleep(5)
subscribe_all()


def pause(which):
    print(f"Pausing node: {which}")
    wsc.send(f"pause {which}")
    print(rcs[which])


def resume(which):
    print(f"Resuming node: {which}")
    wsc.send(f"resume {which}")
    print(rcs[which])


class Commands(cmd.Cmd):
    prompt = '🍒🍌🍏> '

    def do_interactive(self, line):
        """
            interactive
            - Enters interactive command interpreter mode
        """
        self.cmdloop()

    def do_pause(self, line):
        """
            pause <node>
            - Pauses the process running uring node with id <node>
        """
        pause(int(line.split()[0])-1)

    def do_write(self, line):
        """
            write <node> <key> <value>
            - On node <node> writes <value> to <key>
        """
        node = int(line.split()[0])-1
        key = line.split()[1]
        value = line.split()[2]
        client = rcs[node]
        client.execute_as("KV", client.kv_put_cmd(key, value))

    def do_read(self, line):
        """
            read <node> <key>
            - On node <node> reads the value of <key>
        """
        node = int(line.split()[0])-1
        key = line.split()[1]
        client = rcs[node]
        client.execute_as("KV", client.kv_get_cmd(key))

    def do_delete(self, line):
        """
            delete <node> <key>
            - On node <node> deletes the value of <key>
        """
        node = int(line.split()[0])-1
        key = line.split()[1]
        client = rcs[node]
        client.execute_as("KV", client.kv_delete_cmd(key))

    def do_resume(self, line):
        """
            resume <node>
            - Resumes the process running uring node with id <node>
        """
        resume(int(line.split()[0])-1)

    def do_quit(self, line):
        """
            quit
            - Exits the interactive command interpreter
        """
        global quit
        quit = True
        wsc.close()
        disconnect_all()
        exit(0)

    def do_adjoin(self, line):
        """
            adjoin <id>
            - Register uring nodes with the uring
        """
        leader = None

        # find leader node
        for rc in rcs:
            try:
                b = simplejson.loads(rc.status().content)
                if b['role'] == "Leader":
                    leader = rc
                    break
            except:
                print(f"ID: {rc.name} DOWN")

        # register nodes ( idempotent )
        for rc in rcs:
            if rc.port != leader.port:
                url = "http://{}:{}/uring/{}"
                # we need to add 1000 to the port for HTTP
                # we need to add 1 to the node id since the python client stores
                # 0 as the first node id not 1 as RAFT does
                print(url.format(leader.host, leader.port + 1000, rc.node_id + 1))
                response = requests.post(url.format(
                    leader.host, leader.port + 1000, rc.node_id + 1))
                # so we have a good chance the config change is done
                time.sleep(1)

                print(url.format(leader.host, leader.port + 1000, rc.node_id + 1))
                response = requests.post(url.format(
                    leader.host, leader.port + 1000, rc.node_id + 1))

                print(response)
    def do_status(self, line):
        """
            status
            - Retrieve the status of the uring nodes
        """
        global statuses
        for rc in rcs:
            try:
                b = simplejson.loads(rc.status().content)
                b['ok'] = 'up'
                statuses[rc.node_id] = b
                print(
                    f"ID: {b['id']} Role: {b['role']} Term: {b['term']} LastIndex: {b['last_index']}")
            except:
                b = {'id': rc.node_id, 'role': 'Zombie',
                     'term': -1, 'last_index': -1, 'ok': 'down'}
                statuses[rc.node_id - 1] = b
                print(f"ID: {rc.name} DOWN")
        leader_count = len(
            list(filter(lambda x: x['role'] == "Leader", statuses)))
        all_adjoined = len(list(filter(lambda x: x['term'] > 0, statuses)))
        last_index = list(set(map(lambda x: x['last_index'], filter(
            lambda x: x['last_index'] > 0, statuses))))
        term = list(
            set(map(lambda x: x['term'], filter(lambda x: x['term'] > 0, statuses))))
        li_count = len(last_index)
        te_count = len(term)
        converges = leader_count == 1 and all_adjoined == 5 and li_count == 1 and te_count == 1
        if converges:
            print("URing is converged: status OK")
        else:
            print("URing has diverged: status BAD")

    def do_identify(self, line):
        """
            identify
            - Identify nodes in the ring
        """
        for rc in rcs:
            print(f"{rc.node_id} - {rc.name} ws://{rc.host}:{rc.port}/uring")

    def do_select(self, line):
        """
            select <node> MRing
            - Select MRing  protocol for web-socket commands
            select <node> URing
            - Select URing  protocol for web-socket commands
            select <node> KV
            - Select KV protocol for web-socket commands
        """
        args = line.split()
        if len(args) < 1:
            print("Expected at least one argument")

        global rcs
        if len(args) == 2 and (args[1] == "MRing" or args[1] == "URing" or args[1] == "KV"):
            try:
                rcs[int(args[0])].select(args[1])
            except:
                print("Invalid node id")

    def do_mring(self, line):
        """
            mring <node> get_size
            mring <node> set_size <size>
            mring <node> add_node host:port
            mring <node> remove_node host:port
        """
        args = line.split()
        if len(args) < 1:
            print("Expected at least one argument")

        global rcs
        if len(args) == 2 and args[1] == "get_size":
            try:
                rcs[int(args[0])].mring_get_size()
            except:
                print("Invalid node id")
        if len(args) == 3 and args[1] == "set_size":
            try:
                rcs[int(args[0])].mring_set_size(args[2])
            except:
                print("Invalid node id")
        if len(args) == 3 and args[1] == "add_node":
            try:
                rcs[int(args[0])].mring_add_node(args[2])
            except:
                print("Invalid node id")

        if len(args) == 3 and args[1] == "remove_node":
            try:
                rcs[int(args[0])].mring_remove_node(args[2])
            except:
                print("Invalid node id")

    def do_kv(self,line):
        """
            kv <node> get <key>
            kv <node> put <key> <value>
            kv <node> cas <key> <check> <store>
            kv <node> del <key>
        """
        args = line.split()
        if len(args) < 1:
            print("Expected at least one argument")

        global rcs
        if len(args) == 3 and args[1] == "get":
            try:
                rcs[int(args[0])].kv_get(args[2])
            except:
                print("Invalid node id")
        if len(args) == 4 and args[1] == "put":
            try:
                rcs[int(args[0])].kv_put(args[2], args[3])
            except:
                print("Invalid node id")
        if len(args) == 5 and args[1] == "cas":
            try:
                rcs[int(args[0])].kv_cas(args[2], args[3], args[4])
            except:
                print("Invalid node id")
        if len(args) == 3 and args[1] == "del":
            try:
                rcs[int(args[0])].kv_delete(args[1])
            except:
                print("Invalid node id")

    def postloop(self):
        print

    def emptyline(self):
        # noop
        None


def cmd_thread():
    global quit
    global cwq
    line = None
    while not quit:
        line = sys.stdin.readline().strip()
        if line == "quit":
            quit = True
            return
        else:
            Commands().do_interactive(line)
            cwq.insert(0, line)
            print("UNKNOWN CMD: {}".format(line))

def cleanup():
    os.system('clear')
    print("Bye!")

def excepthook(type_, value, tb ):
    cleanup()

def signal_handler(sig, frame):
        cleanup()
        sys.exit(0)

sys.excepthook = excepthook
signal.signal(signal.SIGINT, signal_handler)
atexit.register(cleanup)

commander = threading.Thread(target=cmd_thread)
commander.start()



i = 0
while not quit:
    time.sleep(1)
    maybe_reconnect()
    while len(cwq) > 0:
        print('Task: {}'.format(cwq.pop()))
        i = i + 1

disconnect_all()
print('{"status": "end"}')
